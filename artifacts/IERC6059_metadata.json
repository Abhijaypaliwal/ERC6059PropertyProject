{
	"compiler": {
		"version": "0.8.21+commit.d9974bed"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "AllChildrenRejected",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "childIndex",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					}
				],
				"name": "ChildAccepted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "childIndex",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					}
				],
				"name": "ChildProposed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "childIndex",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "fromPending",
						"type": "bool"
					}
				],
				"name": "ChildTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "fromTokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "toTokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "NestTransfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "childIndex",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					}
				],
				"name": "acceptChild",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "addChild",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxRecursiveBurns",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "childOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "contractAddress",
								"type": "address"
							}
						],
						"internalType": "struct IERC6059.Child",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					}
				],
				"name": "childrenOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "contractAddress",
								"type": "address"
							}
						],
						"internalType": "struct IERC6059.Child[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "directOwnerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "destinationId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "nestTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ownerOf",
				"outputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "pendingChildOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "contractAddress",
								"type": "address"
							}
						],
						"internalType": "struct IERC6059.Child",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					}
				],
				"name": "pendingChildrenOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "contractAddress",
								"type": "address"
							}
						],
						"internalType": "struct IERC6059.Child[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "parentId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "maxRejections",
						"type": "uint256"
					}
				],
				"name": "rejectAllChildren",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "destinationId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "childIndex",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "childAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "childId",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isPending",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "transferChild",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "See https://eips.ethereum.org/EIPS/eip-6059Note: the ERC-165 identifier for this interface is 0x42b0e56f.",
			"events": {
				"AllChildrenRejected(uint256)": {
					"details": "Emitted when a token removes all a child tokens from its pending array.",
					"params": {
						"tokenId": "ID of the token that rejected all of the pending children"
					}
				},
				"ChildAccepted(uint256,uint256,address,uint256)": {
					"details": "Emitted when a parent token accepts a token from its pending array, migrating it to the active array.",
					"params": {
						"childAddress": "Address of the child token's collection smart contract",
						"childId": "ID of the child token in the child token's collection smart contract",
						"childIndex": "Index of the newly accepted child token in the parent token's active children array",
						"tokenId": "ID of the token that accepted a new child token"
					}
				},
				"ChildProposed(uint256,uint256,address,uint256)": {
					"details": "Emitted when a child NFT is added to a token's pending array.",
					"params": {
						"childAddress": "Address of the proposed child token's collection smart contract",
						"childId": "ID of the child token in the child token's collection smart contract",
						"childIndex": "Index of the proposed child token in the parent token's pending children array",
						"tokenId": "ID of the token that received a new pending child token"
					}
				},
				"ChildTransferred(uint256,uint256,address,uint256,bool)": {
					"details": "Emitted when a token transfers a child from itself, transferring ownership.",
					"params": {
						"childAddress": "Address of the child token's collection smart contract",
						"childId": "ID of the child token in the child token's collection smart contract",
						"childIndex": "Index of a child in the array from which it is being transferred",
						"fromPending": "A boolean value signifying whether the token was in the pending child tokens array (`true`) or  in the active child tokens array (`false`)",
						"tokenId": "ID of the token that transferred a child token"
					}
				},
				"NestTransfer(address,address,uint256,uint256,uint256)": {
					"details": "Emitted when `tokenId` token is transferred from `from` to `to`.",
					"params": {
						"from": "Address of the previous immediate owner, which is a smart contract if the token was nested.",
						"fromTokenId": "ID of the previous parent token. If the token was not nested before, the value MUST be `0`",
						"to": "Address of the new immediate owner, which is a smart contract if the token is being nested.",
						"toTokenId": "ID of the new parent token. If the token is not being nested, the value MUST be `0`",
						"tokenId": "ID of the token being transferred"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"acceptChild(uint256,uint256,address,uint256)": {
					"details": "This moves the child token from parent token's pending child tokens array into the active child tokens  array.",
					"params": {
						"childAddress": "Address of the collection smart contract of the child token expected to be at the specified  index",
						"childId": "ID of the child token expected to be located at the specified index",
						"childIndex": "Index of the child token to accept in the pending children array of a given token",
						"parentId": "ID of the parent token for which the child token is being accepted"
					}
				},
				"addChild(uint256,uint256,bytes)": {
					"details": "This adds the child token into the given parent token's pending child tokens array.The destination token MUST NOT be a child token of the token being transferred or one of its downstream  child tokens.This method MUST NOT be called directly. It MUST only be called from an instance of `IERC6059` as part of a  `nestTransfer` or `transferChild` to an NFT.Requirements:  - `directOwnerOf` on the child contract MUST resolve to the called contract.  - the pending array of the parent contract MUST not be full.",
					"params": {
						"childId": "ID of the new proposed child token",
						"parentId": "ID of the parent token to receive the new child token"
					}
				},
				"burn(uint256,uint256)": {
					"details": "When a token is burned, all of its child tokens are recursively burned as well.When specifying the maximum recursive burns, the execution MUST be reverted if there are more children to be  burned.Setting the `maxRecursiveBurn` value to 0 SHOULD only attempt to burn the specified token and MUST revert if  there are any child tokens present.",
					"params": {
						"maxRecursiveBurns": "Maximum number of tokens to recursively burn",
						"tokenId": "ID of the token to burn"
					},
					"returns": {
						"_0": "uint256 Number of recursively burned children"
					}
				},
				"childOf(uint256,uint256)": {
					"details": "Returns a single Child struct locating at `index` of parent token's active child tokens array.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
					"params": {
						"index": "Index of the child token in the parent token's active child tokens array",
						"parentId": "ID of the parent token for which the child is being retrieved"
					},
					"returns": {
						"_0": "struct A Child struct containing data about the specified child"
					}
				},
				"childrenOf(uint256)": {
					"details": "Returns array of Child structs existing for parent token.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
					"params": {
						"parentId": "ID of the parent token for which to retrieve the active child tokens"
					},
					"returns": {
						"_0": "struct[] An array of Child structs containing the parent token's active child tokens"
					}
				},
				"directOwnerOf(uint256)": {
					"details": "If the immediate owner is another token, the address returned, MUST be the one of the parent token's  collection smart contract.",
					"params": {
						"tokenId": "ID of the token for which the direct owner is being retrieved"
					},
					"returns": {
						"_0": "address Address of the given token's owner",
						"_1": "uint256 The ID of the parent token. MUST be `0` if the owner is not an NFT",
						"_2": "bool The boolean value signifying whether the owner is an NFT or not"
					}
				},
				"nestTransferFrom(address,address,uint256,uint256,bytes)": {
					"details": "The destination token MUST NOT be a child token of the token being transferred or one of its downstream  child tokens.",
					"params": {
						"destinationId": "ID of the token to receive the token being transferred",
						"from": "Address of the direct owner of the token to be transferred",
						"to": "Address of the receiving token's collection smart contract",
						"tokenId": "ID of the token being transferred"
					}
				},
				"ownerOf(uint256)": {
					"details": "The *root* owner of the token is the top-level owner in the hierarchy which is not an NFT.If the token is owned by another NFT, it MUST recursively look up the parent's root owner.",
					"params": {
						"tokenId": "ID of the token for which the *root* owner has been retrieved"
					},
					"returns": {
						"owner": "The *root* owner of the token"
					}
				},
				"pendingChildOf(uint256,uint256)": {
					"details": "Returns a single Child struct locating at `index` of parent token's active child tokens array.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
					"params": {
						"index": "Index of the child token in the parent token's pending child tokens array",
						"parentId": "ID of the parent token for which the pending child token is being retrieved"
					},
					"returns": {
						"_0": "struct A Child struct containing data about the specified child"
					}
				},
				"pendingChildrenOf(uint256)": {
					"details": "Returns array of pending Child structs existing for given parent.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
					"params": {
						"parentId": "ID of the parent token for which to retrieve the pending child tokens"
					},
					"returns": {
						"_0": "struct[] An array of Child structs containing the parent token's pending child tokens"
					}
				},
				"rejectAllChildren(uint256,uint256)": {
					"details": "Removes the children from the pending array mapping.The children's ownership structures are not updated.Requirements: - `parentId` MUST exist",
					"params": {
						"maxRejections": "Maximum number of expected children to reject, used to prevent from  rejecting children which arrive just before this operation.",
						"parentId": "ID of the parent token for which to reject all of the pending tokens"
					}
				},
				"transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)": {
					"details": "MUST remove the child from the parent's active or pending children.When transferring a child token, the owner of the token MUST be set to `to`, or not updated in the event of `to`  being the `0x0` address.",
					"params": {
						"childAddress": "Address of the child token's collection smart contract",
						"childId": "ID of the child token in its own collection smart contract",
						"childIndex": "Index of a token we are transferring, in the array it belongs to (can be either active array or  pending array)",
						"data": "Additional data with no specified format, sent in call to `to`",
						"destinationId": "ID of the token to receive this child token (MUST be 0 if the destination is not a token)",
						"isPending": "A boolean value indicating whether the child token being transferred is in the pending array of the  parent token (`true`) or in the active array (`false`)",
						"to": "Address to which to transfer the token to",
						"tokenId": "ID of the parent token from which the child token is being transferred"
					}
				}
			},
			"title": "EIP-6059 Parent-Governed Nestable Non-Fungible Tokens",
			"version": 1
		},
		"userdoc": {
			"events": {
				"AllChildrenRejected(uint256)": {
					"notice": "Used to notify listeners that all pending child tokens of a given token have been rejected."
				},
				"ChildAccepted(uint256,uint256,address,uint256)": {
					"notice": "Used to notify listeners that a new child token was accepted by the parent token."
				},
				"ChildProposed(uint256,uint256,address,uint256)": {
					"notice": "Used to notify listeners that a new token has been added to a given token's pending children array."
				},
				"ChildTransferred(uint256,uint256,address,uint256,bool)": {
					"notice": "Used to notify listeners a child token has been transferred from parent token."
				},
				"NestTransfer(address,address,uint256,uint256,uint256)": {
					"notice": "Used to notify listeners that the token is being transferred."
				}
			},
			"kind": "user",
			"methods": {
				"acceptChild(uint256,uint256,address,uint256)": {
					"notice": "Used to accept a pending child token for a given parent token."
				},
				"addChild(uint256,uint256,bytes)": {
					"notice": "Used to add a child token to a given parent token."
				},
				"burn(uint256,uint256)": {
					"notice": "Used to burn a given token."
				},
				"childOf(uint256,uint256)": {
					"notice": "Used to retrieve a specific active child token for a given parent token."
				},
				"childrenOf(uint256)": {
					"notice": "Used to retrieve the active child tokens of a given parent token."
				},
				"directOwnerOf(uint256)": {
					"notice": "Used to retrieve the immediate owner of the given token."
				},
				"nestTransferFrom(address,address,uint256,uint256,bytes)": {
					"notice": "Used to transfer the token into another token."
				},
				"ownerOf(uint256)": {
					"notice": "Used to retrieve the *root* owner of a given token."
				},
				"pendingChildOf(uint256,uint256)": {
					"notice": "Used to retrieve a specific pending child token from a given parent token."
				},
				"pendingChildrenOf(uint256)": {
					"notice": "Used to retrieve the pending child tokens of a given parent token."
				},
				"rejectAllChildren(uint256,uint256)": {
					"notice": "Used to reject all pending children of a given parent token."
				},
				"transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)": {
					"notice": "Used to transfer a child token from a given parent token."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"nestable.sol": "IERC6059"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266",
			"license": "MIT",
			"urls": [
				"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4",
				"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
				"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
			"license": "MIT",
			"urls": [
				"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
				"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931",
				"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"nestable.sol": {
			"keccak256": "0xc1109db501dde8f7aa5e3c15e592419a3ea254cca8fe0e353cdadc843d542f6d",
			"license": "CC0-1.0",
			"urls": [
				"bzz-raw://3734ea4e89f3dfaa7500b665068c5fd7c2d83a563b472087a03d15558c481e18",
				"dweb:/ipfs/QmdSDNsHTT8ogYQxeFsVR5v6Krpdm1mJmbsoDKBCzWhxzV"
			]
		}
	},
	"version": 1
}